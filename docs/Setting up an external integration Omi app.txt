Hey everyone, so today we're going to have another tutorial around the OMI documentation. In this tutorial we're going to see how we can create an external or integration app as part of the OMI apps ecosystem. As a bit of a context, developers can create apps for OMI and there are two types of apps one is prompt based apps which basically allows you to change the prompt that we use to press to process data and data for memories or data from from the chat and basically create new functionality or extract new information um based on this prompt but a different type of app which is an integration app which is the one we're going to see how to set up today is slightly more complex a bit more complicated where uh not only changing the prompt we are actually going to have our own backend and we can also have our own user interface where um omi will send data to us as developers and we can store it present it do whatever with this data and this is allow this allows us much more flexibility uh because um we can do whatever and there are two types of data that omi currently supports to send out basically things that omi can send to your to your own system to your own server and one of them is memory um when whenever only creates memories um and the other one is real time the real time transcriptions so we can actually get access to live transcription from a wearable as well in this tutorial we're going to see how we can use and leverage the memory creation trigger and so omi will send us any new memory from a user that installed our app and then we can literally do whatever we can display it in in a new user interface we can send it to more uh down downstream uh processing and whatnot um yeah so basically the way the integration app works is with something called a webbook a webbook is very simple actually it's a a simple api a webbook is the exact same thing as an api It is just being used slightly differently. So traditionally with API, you as an app developer, what you would do, you will, let's say Omi has an API, you will just query the API, "Hey, give me all the memories of this user." And then the API will return you the data. this is a very proactive on the side of the developer you need to query the api a web a web book is the same thing but the other way around meaning instead of you asking the omie backend hey give me all of the memories omi will tell you whenever there is a new memory created basically you tell omi hey whenever there is a memory created this is a link this is my server let me know notify me so you are the api and only let you know uh whenever something happens and basically um we will need to create an api endpoint where we will need to be able to get so this is your endpoint which we will create and it will need to be a post endpoint and we will need to be able to get a user the user ID in the query parameters and this kind of like dictionary in the body and we're going to create a simple python face api api and and we're going to deploy it on an aws ec2 instance which is a virtual machine you can deploy it literally anywhere where you can deploy it on AWS, Azure, you can even run it locally. The only important part is that the API need to be accessible on the internet because we need to let OMI servers, OMI backend, know how to reach out to your servers to notify you when a new memory was created. So let's start. So we have this simple file. It is 59 lines of code. more than half of them is just a documentation so it's basically only this is the code we create a new faced api instance and this is some uh a lot of uh it's not so secure basically we tell it we tell it to ignore uh some uh security stuff uh don't do this in production we just do it for um the purpose of understanding how the system works um yeah but in our api we we basically have one endpoint. We have a post endpoint, it is called /webhook, and we're going to get the memory, which is a dictionary that we talked about before, and the user ID, which is a string. If you remember, this is the dictionary, and this is the string. And then we're going to print it and return a message, we got it, and then just run it. Again, this is a very simple API, but once you have the data from OMI, Once OMI triggered this web book, you can store this data in a database, you can send it to more processing, you can literally do whatever you want because this is now your code, your backend, you can do whatever you want. So to run it, we basically need to have someone, somewhere in the cloud to run it. I chose AWS EC2 because I'm used to. I have an instance, this is extra large, but you can literally get the one for free, the tiniest one, it should work as well. It is an Ubuntu, I have a public IP, and I have security rules to make sure you can actually SSH to it so I can access it from my terminal and also HTTP. so the API can work in the security rules. All right, let's connect to the instance. Connect. I'm already connected, but let's do it anyway. Exit. Connected, so I'm back in. So I was in my computer for a moment then I connect to VIN SSH as well. Again, you don't have to follow the exact same thing, you can deploy this server elsewhere. So for example, I think if I got my... I can just run the test... Okay, one second. Anyway, I can just run it locally as a regular first API, but the thing is it will run locally and it won't be accessible anywhere. Okay, so now we need to create a new API, vmapi2 because I created the file already. I'm just going to copy this stuff and I'm going to save it and now we need to install some requirements so let's install python3 install yeah so fast api in the new python stuff they created this check that make sure you don't break your main python interpreter which i hate just add this flag to install it across your entire system so install that fast api let's install it uh unicorn uh sorry let's install cool and then you will also need to install something called nginx nginx is basically what allows allow you to convert this api from running locally it creates a proxy from your local instance to the rest of the world and so let's install that i think i or already have this installed which is fine um we will run the api in a second just gonna do okay so here i this is the thing i created already before um the only thing you need to change here and to align with whatever you are doing is the ip so this needs to be your ip which in the case of AWS you should be able to see it here. Cool. Save this file. Okay we save this file and then we need to enable this nginx. I'm going to send you all of those commands for sure. Again I created it like a few minutes ago so it tells me it exists already which is fine and then just restart the nginx service cool basically what it is doing it creates a proxy um to the internet uh to the internet in http http is port 80 with your ip and the proxy is to the local instance that we are running which is this local host in port 8000 which will be which will be this one which will be this one cool after we have all of that set up we need to run the api so we run the api and we have the api running just to make sure it is actually running and we can access from the internet and we are going to make a small http request we can use something called insomnia which is an HTTP client, just HTTP, the IP, and then slash webhook. We're going to trigger this. It needs to be a post. Cool. We get an error back. It basically tells us that we are missing some required stuff, which is true. We need to add the UID and also the body stuff. also if you try to do a get it will fail method not allowed so we know it works and we also can see the logs here this is the logs of the request we just made um but anyway now it works now okay now what we need to do uh we basically have our api our backend it is up and running we can access it um through the internet which is good uh right now it's a bit boring you're just returning a message and printing the the memory when it's successful but again this is the point of this tutorial is just to show you how to set this up and then you can take it and do what literally whatever you want the last stage we have the last step is to make sure uh omi we have an app in omi that knows about the about the webbook so we're going to go to apps and we're going all all the way up, and we're going to create and submit a new app. We're going to give it a name, Adam Test. We can choose whatever financial category does matter. Description, blah, blah, blah, blah, blah, blah. Okay. And we want the app capability to be an external integration here at the top. so we can actually have the app specific details. Let's choose the memory creation trigger. We don't have auth URL. We only have a web book. Let's paste our web book URL, allow paste. So this is the API URL that we have. You can obviously add setup instructions, set up URL after completion. Okay. And then submit app. I need to add the logo, which is okay. I have a logo now and then sum it up again confirm cool and now we should be able to where is it now we need to find it one second okay atom test we install it install up cool it is installed and I think now if a new memory has been created confirm it should create a new memory and then we should see a webbook here any any second now it is still processing and whenever OMI is finished the processing we should see the data here we go so now a few memories were created i think we got a few of them here's all the text the text that i was chatting about here is another one blah blah blah blah blah blah it's all good and yeah it works so now um yeah that's it now we have our api up and running we got the events from omi and we can store it on our back end we can literally do whatever and now that you have access to that and another thing is that you also have i won't go over it now but you also have the live transcription so you can actually get the streaming of my of me speaking through the wearable like ongoing new world new world new world new world to your back end um and do your own things with that um and lastly um if you want there is a much more complete example in omie plugins example um which is a more again more comprehensive uh apis in this one you will have a notion crm it will create uh it will um add stuff to your notion through this api and news checker based on the live transcription so you have really cool stuff there all of it is based on the same thing. It is a fast API deployed somewhere, which you can then put the API into Omis app, like we saw, and it just works. Cool. I hope you enjoyed it. And if you have questions, let me know, or let Nick know. And yeah, looking forward to do another tutorial.