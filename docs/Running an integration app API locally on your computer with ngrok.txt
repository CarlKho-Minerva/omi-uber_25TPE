- Hello everyone. So a few days ago, I recorded a video on how you can set up an external or an integration app in the OMI app ecosystem. And I did it by running the API, our own custom API in AWS EC2 virtual machine. But if you just start out and want to see what you can create, how fast you can build something up, It might be a bit of an overkill to run something on AWS, especially if you don't have the background for that. So today I'm going to show you how you can run the API locally on your computer and then make it available on the Internet from your local computer. So you can set up an OMI integration app like we did in this video, but without all the overhead of creating a EC2 instance on AWS. So to start, we will quickly review the API we had before. So all of this will become irrelevant, except obviously installing Fest API and UVcon. So you need to like, people install those stuff. And then this is our API basically, creating, importing the packages, creating an app instance for Face API. And then we only have one endpoint, the slash webhook. By the way, if you have not watched this video, I would highly recommend just checking it out because I do explain a bit better. And yeah, we just run the API. Now, if we copy this code create create a new file you can create it with vs code I just use the terminal test API do pi and paste it and now I have like this file I can run Python 3 test API cool now I have the API running but again the issue is that it is running locally it runs a 127.0.0.1 is a local host you cannot access it from the from the internet you cannot configure uh your uh uh an app in omni that will actually work with that however there is a solution called ngrok um ngok.com or download.ngrok.com you can download it to mac like Windows, Linux, Raspberry Pi, literally whatever you want. And this solution is basically creates a proxy between your computer to the internet. So it's something that we're going to install and run on our computer. And this small like client app that we're going to run on our computer and going to connect with NGOK servers. And then it will create like a proxy, a tunnel between our local instance of the api to the internet and it might sound a bit too much but it is really simple so all you need to do is like if you use a mac just reinstall ngrok and go and work windows think coco but you can also just download the the file same with a mac you can just download here for i don't know the the zip file from here and cool and i already have it installed but just to show you ngrog this is how it looks like my ngoc version is let's see 3.5 cool now i'm going to run the api again because i do want it to run in the background the important stuff to remember is that um it runs on port 8000 and it matters because we need it in a second now after we install ngrok we also need to create an ngrok account so you will go to ngrok and just log in to your account and then we already set this up up here is a token here i will hide it um and then go to your token and then all you need to run is this following command and go config add token um i'll do it in separate and add token and then like the token that you have here it is hidden um but just fyi uh you will copy it just paste and run the command and after that we're all set up all we need to do is to run ngrok http 8 000 what it will do it will create uh this proxy that we that i mentioned it will um connect to my port locally because this runs locally in my computer so it can access my local host and it gives me a url that will be accessible in the internet uh that will just tunnel all of the uh traffic to my local stuff so just to test it out make sure it works i will copy this url and i will go to i already did it but i will do a post request and to the webhook entrance uh do this and it works i get a reply from the api we can also see we get errors the reason again like in the previous video the reason it errors out is because we did not provide the right uh query parameters let's see uid blah blah blah let's see okay so now it feels slightly less because it still needs a body we can create a body just to prove you that it works okay we got it nice and that's it now we can um more easily uh build uh integration apps locally and then whenever we're ready it is better to run it on aws on ec2 not on your computer so whenever you're ready to do that after the app is fully developed you can go watch the other video again.